{"version":3,"sources":["Chat.js","index.js"],"names":["Chat","_useState","useState","_useState2","_slicedToArray","userMessage","setUserMessage","_useState3","_useState4","chatMessages","setChatMessages","_useState5","_useState6","isButtonClicked","setIsButtonClicked","fetchBotMessage","useCallback","fetch","concat","then","response","text","data","botMessage","message","isBot","prevChatMessages","_toConsumableArray","slice","catch","error","console","useEffect","_jsxs","style","width","height","children","_jsx","Typography","variant","align","gutterBottom","display","flexDirection","overflow","map","index","justifyContent","marginBottom","Chip","label","color","alignItems","TextField","fullWidth","value","onChange","event","target","Button","onClick","rootElement","document","getElementById","createRoot","render","StrictMode"],"mappings":"iLA4FeA,EAzFF,WACX,IAAAC,EAAsCC,mBAAS,IAAGC,EAAAC,YAAAH,EAAA,GAA3CI,EAAWF,EAAA,GAAEG,EAAcH,EAAA,GAClCI,EAAwCL,mBAAS,IAAGM,EAAAJ,YAAAG,EAAA,GAA7CE,EAAYD,EAAA,GAAEE,EAAeF,EAAA,GACpCG,EAA8CT,oBAAS,GAAMU,EAAAR,YAAAO,EAAA,GAAtDE,EAAeD,EAAA,GAAEE,EAAkBF,EAAA,GAkBpCG,EAAkBC,uBAAY,WAClCC,MAAM,wDAADC,OAAyDb,IAC3Dc,MAAK,SAACC,GAAQ,OAAKA,EAASC,MAAM,IAClCF,MAAK,SAACG,GACL,IAAMC,EAAa,CAAEC,QAASF,EAAMG,OAAO,GAC3Cf,GAAgB,SAACgB,GAAgB,SAAAR,OAAAS,YAC5BD,EAAiBE,MAAM,GAAI,IAAE,CAChCL,GAAU,GAEd,IACCM,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAChB,GACJ,GAAG,CAACzB,IAUJ,OARA2B,qBAAU,WACJnB,IACFE,IACAD,GAAmB,GACnBR,EAAe,IAEnB,GAAG,CAACO,EAAiBE,IAGnBkB,eAAA,OAAKC,MAAO,CAAEC,MAAO,OAAQC,OAAQ,QAASC,SAAA,CAC5CC,cAACC,IAAU,CAACC,QAAQ,KAAKC,MAAM,SAASC,cAAY,EAAAL,SAAC,WAGrDC,cAAA,OACEJ,MAAO,CACLS,QAAS,OACTC,cAAe,SACfR,OAAQ,OACRS,SAAU,QACVR,SAED5B,EAAaqC,KAAI,SAACtB,EAASuB,GAAK,OAC/BT,cAAA,OAEEJ,MAAO,CACLS,QAAS,OACTK,eAAgBxB,EAAQC,MAAQ,aAAe,WAC/CwB,aAAc,OACdZ,SAEFC,cAACY,IAAI,CACHC,MAAO3B,EAAQA,QACfgB,QAAQ,WACRY,MAAO5B,EAAQC,MAAQ,UAAY,eAVhCsB,EAYD,MAGVd,eAAA,OAAKC,MAAO,CAAES,QAAS,OAAQU,WAAY,UAAWhB,SAAA,CACpDC,cAACgB,IAAS,CACRC,WAAS,EACTJ,MAAM,iBACNK,MAAOnD,EACPoD,SA1EwB,SAACC,GAC/BpD,EAAeoD,EAAMC,OAAOH,MAC9B,IA0EMlB,cAACsB,IAAM,CAACpB,QAAQ,YAAYY,MAAM,UAAUS,QAxExB,WACxB,GAAIxD,EAAa,CACf,IAAMkB,EAAa,CAAEC,QAAS,YAAaC,OAAO,GAClDf,GAAgB,SAACgB,GAAgB,SAAAR,OAAAS,YAC5BD,GAAgB,CACnB,CAAEF,QAASnB,EAAaoB,OAAO,GAC/BF,GAAU,IAEZT,GAAmB,EACrB,CACF,EA8D6EuB,SAAC,cAMhF,ECrFMyB,EAAcC,SAASC,eAAe,QAC/BC,qBAAWH,GAEnBI,OACH5B,cAAC6B,aAAU,CAAA9B,SACTC,cAACtC,EAAI,M","file":"static/js/main.ea50abc3.chunk.js","sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\nimport { Chip, TextField, Typography, Button } from \"@material-ui/core\";\n\nconst Chat = () => {\n  const [userMessage, setUserMessage] = useState(\"\");\n  const [chatMessages, setChatMessages] = useState([]);\n  const [isButtonClicked, setIsButtonClicked] = useState(false);\n\n  const handleUserMessageChange = (event) => {\n    setUserMessage(event.target.value);\n  };\n\n  const handleSendMessage = () => {\n    if (userMessage) {\n      const botMessage = { message: \"Typing...\", isBot: true };\n      setChatMessages((prevChatMessages) => [\n        ...prevChatMessages,\n        { message: userMessage, isBot: false },\n        botMessage\n      ]);\n      setIsButtonClicked(true);\n    }\n  };\n\n  const fetchBotMessage = useCallback(() => {\n    fetch(`https://walrus-app-hodhq.ondigitalocean.app/vision?q=${userMessage}`)\n      .then((response) => response.text())\n      .then((data) => {\n        const botMessage = { message: data, isBot: true };\n        setChatMessages((prevChatMessages) => [\n          ...prevChatMessages.slice(0, -1),\n          botMessage\n        ]);\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n  }, [userMessage]);\n\n  useEffect(() => {\n    if (isButtonClicked) {\n      fetchBotMessage();\n      setIsButtonClicked(false);\n      setUserMessage(\"\");\n    }\n  }, [isButtonClicked, fetchBotMessage]);\n\n  return (\n    <div style={{ width: \"100%\", height: \"100%\" }}>\n      <Typography variant=\"h4\" align=\"center\" gutterBottom>\n        Vision\n      </Typography>\n      <div\n        style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          height: \"80vh\",\n          overflow: \"auto\"\n        }}\n      >\n        {chatMessages.map((message, index) => (\n          <div\n            key={index}\n            style={{\n              display: \"flex\",\n              justifyContent: message.isBot ? \"flex-start\" : \"flex-end\",\n              marginBottom: \"8px\"\n            }}\n          >\n            <Chip\n              label={message.message}\n              variant=\"outlined\"\n              color={message.isBot ? \"primary\" : \"secondary\"}\n            />\n          </div>\n        ))}\n      </div>\n      <div style={{ display: \"flex\", alignItems: \"center\" }}>\n        <TextField\n          fullWidth\n          label=\"Type a message\"\n          value={userMessage}\n          onChange={handleUserMessageChange}\n        />\n        <Button variant=\"contained\" color=\"primary\" onClick={handleSendMessage}>\n          Send\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default Chat;\n","import { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport Chat from \"./Chat\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\n\nroot.render(\n  <StrictMode>\n    <Chat />\n  </StrictMode>\n);\n"],"sourceRoot":""}